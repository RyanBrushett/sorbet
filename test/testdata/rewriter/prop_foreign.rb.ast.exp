begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$152>(<blk>)
      begin
        begin
          ::<Magic>.<define-top-class-or-module>(::ForeignClass)
          ::Sorbet::Private::Static.keep_for_ide(::ForeignClass)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::AdvancedODM)
          ::Sorbet::Private::Static.keep_for_ide(::AdvancedODM)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  class ::ForeignClass<<C ForeignClass>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::AdvancedODM<<C AdvancedODM>> < (::<todo sym>, ::T::Props)
    def foreign_lazy(<blk>)
      begin
        arg2 = <self>.instance_variable_get(:@foreign_lazy)
        <self>.class().decorator().prop_get_logic(<self>, :foreign_lazy, arg2)
      end
    end

    def foreign_lazy=(foreign_lazy, <blk>)
      begin
        if ::T::NonForcingConstants.non_forcing_is_a?(<self>, "::Chalk::ODM::Document")
          ::Chalk::ODM::DocumentDecoratorHelper.soft_freeze_logic(<self>, :foreign_lazy)
        else
          <emptyTree>
        end
        <self>.instance_variable_set(:@foreign_lazy, arg0)
      end
    end

    def foreign_lazy_(opts, <blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    def foreign_lazy_!(opts, <blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    def foreign_proc(<blk>)
      begin
        arg2 = <self>.instance_variable_get(:@foreign_proc)
        <self>.class().decorator().prop_get_logic(<self>, :foreign_proc, arg2)
      end
    end

    def foreign_proc=(foreign_proc, <blk>)
      begin
        if ::T::NonForcingConstants.non_forcing_is_a?(<self>, "::Chalk::ODM::Document")
          ::Chalk::ODM::DocumentDecoratorHelper.soft_freeze_logic(<self>, :foreign_proc)
        else
          <emptyTree>
        end
        <self>.instance_variable_set(:@foreign_proc, arg0)
      end
    end

    def foreign_proc_(opts, <blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    def foreign_proc_!(opts, <blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    def foreign_invalid(<blk>)
      begin
        arg2 = <self>.instance_variable_get(:@foreign_invalid)
        <self>.class().decorator().prop_get_logic(<self>, :foreign_invalid, arg2)
      end
    end

    def foreign_invalid=(foreign_invalid, <blk>)
      begin
        if ::T::NonForcingConstants.non_forcing_is_a?(<self>, "::Chalk::ODM::Document")
          ::Chalk::ODM::DocumentDecoratorHelper.soft_freeze_logic(<self>, :foreign_invalid)
        else
          <emptyTree>
        end
        <self>.instance_variable_set(:@foreign_invalid, arg0)
      end
    end

    def foreign_invalid_(opts, <blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    def foreign_invalid_!(opts, <blk>)
      ::T.unsafe(::Kernel).raise("Sorbet rewriter pass partially unimplemented")
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.returns(::String)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:arg0, ::String).returns(::String)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:opts, ::T.untyped()).returns(::T.nilable(::ForeignClass))
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:opts, ::T.untyped()).returns(::ForeignClass)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.returns(::String)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:arg0, ::String).returns(::String)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:opts, ::T.untyped()).returns(::T.nilable(::ForeignClass))
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:opts, ::T.untyped()).returns(::ForeignClass)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.returns(::String)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:arg0, ::String).returns(::String)
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:opts, ::T.untyped()).returns(::T.untyped())
        end
        ::Sorbet::Private::Static.sig(::T::Sig::WithoutRuntime) do ||
          <self>.params(:opts, ::T.untyped()).returns(::T.untyped())
        end
        <self>.include(::T::Props)
        <self>.prop(:foreign_lazy, ::String, :foreign, ::Kernel.lambda() do ||
            ::ForeignClass
          end, :without_accessors, true)
        ::Sorbet::Private::Static.keep_def(<self>, :foreign_lazy, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :foreign_lazy=, :normal)
        <self>.prop(:foreign_proc, ::String, :foreign, <self>.proc() do ||
            ::ForeignClass
          end, :without_accessors, true)
        ::Sorbet::Private::Static.keep_def(<self>, :foreign_proc, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :foreign_proc=, :normal)
        <self>.prop(:foreign_invalid, ::String, :foreign, <self>.proc() do ||
            :not_a_type
          end, :without_accessors, true)
        ::Sorbet::Private::Static.keep_def(<self>, :foreign_invalid, :normal)
        ::Sorbet::Private::Static.keep_def(<self>, :foreign_invalid=, :normal)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
